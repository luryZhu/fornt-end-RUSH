1.实现sleep(time)

2.手写深拷贝

3.手写节流

4.实现Node.js中的EventEmmiter

5.监测jsonp请求，返回请求的url地址

/*
第一题
实现一个方法，比较两个字符串版本号的大小

- `1.0.0` 大于 `0.9.5`
- `2.1.9` 大于 `2.0.5`
- `3.0.0` 等于 `3.0.0`

结果
- 大于返回：1
- 等于返回：0
- 小于返回：-1

> 版本号里只有非负整数，没有其他字符
*/
function versionCompare(ver1,ver2){
  ver1=ver1.split(".")
  ver2=ver2.split(".")
  if (ver1.length !== ver2.length) return -1
  for (let i=0;i<ver1.length;i++){
    if (ver1[i]<ver2[i]) return -1
    if (ver1[i]>ver2[i]) return 1
  }
  return 0

}




/*
第二题
有多个 input 输入框，需要通过 JavaScript 实现错误检测逻辑，实时监控 input 的输入，当出现错误时输出错误提示。
需要检测如下 3 种错误信息：
1. 输入内容为空，输出错误信息 empty
2. 输入内容和其他输入框内容重复，所有重复的输入框都输出错误信息 duplicate
3. 输入内容长度超过 10，输出错误信息 overlength

**重点注意代码可读性**
*/

function checkInputs(){
  const inputs=document.getElementsByTagName('input')
  const inputsArr=new Array(inputs.length)
  // 事件处理函数：检验每一个输入框的输入
  function changeInputHandler(e){
    let content==e.target.value
    inputsArr[e.target.index]=content
    // 1. 检验是否内容为空
    if (content==="") {
      addErrElement("empty", index)
    }
    // 2. 检验重复
    // 存储所有重复的输入的索引
    let duplicateArr=[]
    for (let i of inputsArr){
      if (i===content) duplicateArr.push(i)
    }
    duplicateArr.forEach(value=>{
      addErrElement("duplicate", value)
    })
      
    // 3. 检验长度
    if (content && content.length>10){
      addErrElement("overlength", index)
    }
    
  }

  // 显示错误信息
  function addErrElement(errText, index)
    if (errText!=="") {
      let errElement=document.createElement('p')
      errElement.innerHTML=errText
      // 加入新节点
      inputs[index].nextSibling=errElement
    }

  // 绑定事件处理函数
  inputs.forEach((item,index)=>{
    item.index=index
    item.addEventListener("keyUp", changeInputHandler)   
  })

}





/*
第三题
> 设想一个场景，页面中有多个相同组件，加载时，组件内部会发起相同的请求，我们希望避免同一时间重复请求的问题。

目标：实现一个函数enhancedHttp()，增加http请求去重的能力。

当新发起一个请求时，判断是否存在进行中的相同请求（请求参数一致即相同）：
- 如果存在，复用该进行中的请求，不发起新请求。
- 如果不存在,发起新请求。

附加题: 基于上述目标，如果一次会话内，发起的请求是被请求过的，直接使用上次相同请求的返回结果，不真的发起请求。
*/
const HttpRequests=new WeakMap()

function sendAJAX(){
  return new Promise((resolve,reject)=>{
    let xhr=new XMLHttpRequest()
    xhr.open(...arguments)
    xhr.send()
    xhr.onreadystatechange=function(){
      if (xhr.readyState===4){
        if (xhr.status>=200 &&xhr.status<300){
          resolve (xhr)
        } else {
          reject (xhr.statusText)
        }
      }
    }
  })
}

async function enhancedHttp(){
  // 判断，已有请求
  if HttpRequests.has(arguments) return HttpRequests.get(arguments)
  // 没有请求
  console.log("request already exist,please wait...")
  try{
    let result=await sendAJAX(...arguments)
    HttpRequests.set(arguments, result)
    return result
  } catch(e){
    HttpRequests.set(arguments, e)
    return e
  }
  
}
